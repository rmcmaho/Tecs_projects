// This file is part of the materials accompanying the book 
// "The Elements of Computing Systems" by Nisan and Schocken, 
// MIT Press. Book site: www.idc.ac.il/tecs
// File name: projects/05/CPU.hdl

/**
 * The Central Processing unit (CPU).
 * Consists of an ALU and a set of registers, designed to fetch and 
 * execute instructions written in the Hack machine language.
 * In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM=0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time unit. If reset=1 then the 
 * CPU jumps to address 0 (i.e. sets pc=0 in next time unit) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).

    OUT outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    // Decode
    Not(in=instruction[15], out=aInstruction);
    Not(in=aInstruction, out=cInstruction);
    Or(a=aInstruction, b=storeA, out=loadA);
    And(a=instruction[3], b=instruction[15], out=writeM);
    And(a=instruction[4], b=cInstruction, out=loadD);
    And(a=instruction[5], b=instruction[15], out=storeA);
    Mux16(a=aOut, b=inM, sel=instruction[12], out=AorM);

    // ALU
    ALU(x=dOut, y=AorM, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=aluOut, out=outM, ng=negativeResult, zr=zeroResult); 
    
    // The 'A' register
    Mux16(a=instruction, b=aluOut, sel=storeA, out=aIn);
    ARegister(in=aIn, load=loadA, out=aOut, out[0..14]=addressM);

    // The 'D' register
    DRegister(in=aluOut, load=loadD, out=dOut);

    // Ensure JLT is exactly satisfied
    Xor(a=negativeResult, b=instruction[2], out=jltNotSatisfied);
    Not(in=jltNotSatisfied, out=jltSatisfied);

    // Ensure JEQ is exactly satisfied
    Xor(a=zeroResult, b=instruction[1], out=jeqNotSatisfied);
    Not(in=jeqNotSatisfied, out=jeqSatisfied);

    // Ensure JGT is exactly satisfied
    Not(in=negativeResult, out=notNegativeResult);
    Xor(a=notNegativeResult, b=instruction[0], out=jgtNotSatisfied);
    Not(in=jgtNotSatisfied, out=jgtSatisfied);

    // Make sure all JMP values are satisfied
    And(a=jltSatisfied, b=jeqSatisfied, out=twoSatisfied);
    And(a=twoSatisfied, b=jgtSatisfied, out=allJmpSatisfied);

    
    And(a=instruction[0], b=instruction[1], out=maybeJmp);
    And(a=maybeJmp, b=instruction[2], out=unconditionalJmp);

    // Jump if all JMP values are satisfied or if it is an unconditional JMP    
    Or(a=allJmpSatisfied, b=unconditionalJmp, out=possibleJmp);

    // Only JMP on A-instructions
    And(a=possibleJmp, b=instruction[15], out=jump);

    Not(in=reset, out=incPC);

    PC(in=aOut, load=jump, inc=incPC, reset=reset, out[0..14]=pc);
}

