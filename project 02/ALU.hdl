// This file is part of the materials accompanying the book 
// "The Elements of Computing Systems" by Nisan and Schocken, 
// MIT Press. Book site: www.idc.ac.il/tecs
// File name: projects/02/ALU.hdl

/**
 * The ALU.  Computes a pre-defined set of functions out = f(x,y)
 * where x and y are two 16-bit inputs. The function f is selected 
 * by a set of 6 control bits denoted zx, nx, zy, ny, f, no.
 * The ALU operation can be described using the following pseudocode:
 *     if zx=1 set x = 0       // 16-bit zero constant
 *     if nx=1 set x = !x      // Bit-wise negation
 *     if zy=1 set y = 0       // 16-bit zero constant
 *     if ny=1 set y = !y      // Bit-wise negation
 *     if f=1  set out = x + y // Integer 2's complement addition
 *     else    set out = x & y // Bit-wise And
 *     if no=1 set out = !out  // Bit-wise negation
 *
 * In addition to computing out, the ALU computes two 1-bit outputs:
 *     if out=0 set zr = 1 else zr = 0 // 16-bit equality comparison
 *     if out<0 set ng = 1 else ng = 0 // 2's complement comparison
 */

CHIP ALU {

    IN  // 16-bit inputs:
        x[16], y[16],
        // Control bits:
        zx, // Zero the x input
        nx, // Negate the x input
        zy, // Zero the y input
        ny, // Negate the y input
        f,  // Function code: 1 for add, 0 for and
        no; // Negate the out output

    OUT // 16-bit output
        out[16],

        // ALU output flags
        zr, // 1 if out=0, 0 otherwise
        ng; // 1 if out<0, 0 otherwise

    PARTS:
    // zxOut=0 if zx=1, x otherwise
    Mux16(a=x, b=false, sel=zx, out=zxOut);

    // nxOut=zxOutNot if nx=1, zxOut otherwise
    Not16(in=zxOut, out=zxOutNot);
    Mux16(a=zxOut, b=zxOutNot, sel=nx, out=nxOut);
    
    // zyOut=0 if zy=1, y otherwise
    Mux16(a=y, b=false, sel=zy, out=zyOut);

    // nyOut=zyOutNot if ny=1, zyOut otherwise
    Not16(in=zyOut, out=zyOutNot);
    Mux16(a=zyOut, b=zyOutNot, sel=ny, out=nyOut);

    // tempOut=addOut if f=1, andOut otherwise
    Add16(a=nxOut, b=nyOut, out=addOut);
    And16(a=nxOut, b=nyOut, out=andOut);
    Mux16(a=andOut, b=addOut, sel=f, out=fOut);

    // Negate output if no=1
    Not16(in=fOut, out=notOut);
    Mux16(a=fOut, b=notOut, sel=no,
    		  out[0..7]=lsbOut, out[8..15]=msbOut, out[15]=sign, // Split the output for final checks
		  out=out); 	    		       		     // Send to out pin

    // Check if it is zero
    Or8Way(in=lsbOut, out=or0to7);
    Or8Way(in=msbOut, out=or8to15);
    Or(a=or0to7, b=or8to15, out=notZero);
    Not(in=notZero, out=zr);

    // Check if negative
    And(a=true, b=sign, out=ng);
}
